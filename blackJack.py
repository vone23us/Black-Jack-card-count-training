# BLACKJACK: Given three integers between 1 and 11, if their sum is less than or eAual to 21, return their sum.# If their sum exceeds 21 and there's an eleven, reduce the total sum by 10.# Finally, if the sum (even after adjustment) exceeds 21, return 'BUST'# Hi low count strategy. 10 , j, q, k, a == -1 to count. 2, 3, 4, 5, 6 == count value of +1. 7 8 9 have no value.#  Things we need:##   1: deck of 52 cards.#       x must be able to have up to 5 decks#       x needs to handle face cards.#       x needs to have 4 suits.#         logic for Ace = 11 0r 1#       x shuffle##   2: x dealer with dealer rules#      x stand on 17#      x hit on anything under 17##   3: player rules#      x hit, stand#        double down, split###   4: game rules#       closest hand to or on 21 wins game or push if both player and dealer have the same number.##   5: betting##   6: advanced strategies eg: split , double down.#import randomdef get_deck():    return [['2♥', 2], ['2♣', 2], ['2♠', 2], ['2♦', 2],            ['3♥', 3], ['3♣', 3], ['3♠', 3], ['3♦', 3],            ['4♥', 4], ['4♣', 4], ['4♠', 4], ['4♦', 4],            ['5♥', 5], ['5♣', 5], ['5♠', 5], ['5♦', 5],            ['6♥', 6], ['6♣', 6], ['6♠', 6], ['6♦', 6],            ['7♥', 7], ['7♣', 7], ['7♠', 7], ['7♦', 7],            ['8♥', 8], ['8♣', 8], ['8♠', 8], ['8♦', 8],            ['9♥', 9], ['9♣', 9], ['9♠', 9], ['9♦', 9],            ['10♥', 10], ['10♣', 10], ['10♠', 10], ['10♦', 10],            ['J♥', 10], ['J♣', 10], ['J♠', 10], ['J♦', 10],            ['Q♥', 10], ['Q♣', 10], ['Q♠', 10], ['Q♦', 10],            ['K♥', 10], ['K♣', 10], ['K♠', 10], ['K♦', 10],            ['A♥', 10], ['A♣', 10], ['A♠', 10], ['A♦', 10]]def get_decks(number_of_decks):    _decks = []    for num in range(number_of_decks):        _decks += get_deck()    return _decksdef print_cards(player_name, cards):    print(player_name + ': ', end='')    for card in cards:        print(card[0] + ' ', end='')    print(' == ' + str(cards_total(cards)))def cards_total(cards):    total = 0    for card in cards:        total += card[1]    return total    # add the card values    # -- logic for 1 Ace, if total value is > 21 and there is an Ace, then subtract 10.    # --- multiple Aces for future development# Generate the decktraining_deck_count = input('How many Decks will you train with? ')deck = get_decks(int(training_deck_count))random.shuffle(deck)print()# PLAY A ROUND# while deck_is_not_empty:   # deal_cards()   # player_options()   # dealer_options()   # winner()# Deal the first round of cards (Blackjack Rules)# - Deal first card to players first# - Deal first card to dealer last# - Deal second card to players# - Deal second card to dealer last (Don't show it!)player1_cards = []player1_cards.append(deck.pop(0))print_cards('Player 1', player1_cards)dealer_cards = []dealer_cards.append(deck.pop(0))print_cards('Dealer  ', dealer_cards)player1_cards.append(deck.pop(0))print_cards('Player 1', player1_cards)dealer_cards.append(deck.pop(0))# Player Options (hit or stand)# offer the player 1 options to hit or stand (FUTURE: betting)print()player1_option = input('(H)it or (S)tand? ')if cards_total(player1_cards) < 22:    if 'h' == player1_option.lower():         # need to convert this to a while loop. while h and p1<22 continue. 12/27        player1_cards.append(deck.pop(0))        print_cards('Player 1', player1_cards)    elif 's' == player1_option.lower():        print('Player 1 Stands on ' + str(cards_total(player1_cards))) # added stand logic. 12/27# - function dealer_option = return HIT or STANDif cards_total(dealer_cards) <= 16:    dealer_cards.append(deck.pop(0))print_cards('Dealer  ', dealer_cards)# WIN / LOSE LOGIC# - function cards_value = returns total value of the cards (factoring in A)# - function is_busted(dealer_cards_value, player_cards_value) = returns true or falseprint()dealer_total = cards_total(dealer_cards)player_total = cards_total(player1_cards)if player_total > 21:    print("dealer wins... you suck at life")elif dealer_total > 21:    print('Dealer Busted, You WIN!')elif player_total > dealer_total:    print('You WIN!')elif player_total == dealer_total:  # added more logic to the win lose 12/27/18.    print('Push!')else:    print("dealer wins! You Lose!")# repeat until bust of dealer or player# then start again with the same deck (pop out cards from deck after dealt)# basic mechanics done, then add in advanced features